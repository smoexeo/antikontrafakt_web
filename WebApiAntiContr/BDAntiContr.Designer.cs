//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 22.06.2020 15:00:13
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DBContext
{

    [DatabaseAttribute(Name = "DB_A612DF_Flatren")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class DBDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertFeedbackPO(FeedbackPO instance);
        partial void UpdateFeedbackPO(FeedbackPO instance);
        partial void DeleteFeedbackPO(FeedbackPO instance);
        partial void InsertFeedbackProd(FeedbackProd instance);
        partial void UpdateFeedbackProd(FeedbackProd instance);
        partial void DeleteFeedbackProd(FeedbackProd instance);
        partial void InsertRequestPO(RequestPO instance);
        partial void UpdateRequestPO(RequestPO instance);
        partial void DeleteRequestPO(RequestPO instance);
        partial void InsertRequestProd(RequestProd instance);
        partial void UpdateRequestProd(RequestProd instance);
        partial void DeleteRequestProd(RequestProd instance);
        partial void InsertUserAdmin(UserAdmin instance);
        partial void UpdateUserAdmin(UserAdmin instance);
        partial void DeleteUserAdmin(UserAdmin instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public DBDataContext() :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DBDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<FeedbackPO> FeedbackPOs
        {
            get
            {
                return this.GetTable<FeedbackPO>();
            }
        }

        public Devart.Data.Linq.Table<FeedbackProd> FeedbackProds
        {
            get
            {
                return this.GetTable<FeedbackProd>();
            }
        }

        public Devart.Data.Linq.Table<RequestPO> RequestPOs
        {
            get
            {
                return this.GetTable<RequestPO>();
            }
        }

        public Devart.Data.Linq.Table<RequestProd> RequestProds
        {
            get
            {
                return this.GetTable<RequestProd>();
            }
        }

        public Devart.Data.Linq.Table<UserAdmin> UserAdmins
        {
            get
            {
                return this.GetTable<UserAdmin>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace DBContext
{

    /// <summary>
    /// There are no comments for DBContext.FeedbackPO in the schema.
    /// </summary>
    [Table(Name = @"dbo.FeedbackPOS")]
    public partial class FeedbackPO : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdFeed;

        private int _IdReq;

        private string _FeedbackText;
        #pragma warning restore 0649

        private EntityRef<RequestPO> _RequestPO;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFeedChanging(int value);
        partial void OnIdFeedChanged();
        partial void OnIdReqChanging(int value);
        partial void OnIdReqChanged();
        partial void OnFeedbackTextChanging(string value);
        partial void OnFeedbackTextChanged();
        #endregion

        public FeedbackPO()
        {
            this._RequestPO  = default(EntityRef<RequestPO>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFeed in the schema.
        /// </summary>
        [Column(Name = @"id_feed", Storage = "_IdFeed", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdFeed
        {
            get
            {
                return this._IdFeed;
            }
            set
            {
                if (this._IdFeed != value)
                {
                    this.OnIdFeedChanging(value);
                    this.SendPropertyChanging("IdFeed");
                    this._IdFeed = value;
                    this.SendPropertyChanged("IdFeed");
                    this.OnIdFeedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdReq in the schema.
        /// </summary>
        [Column(Name = @"id_req", Storage = "_IdReq", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdReq
        {
            get
            {
                return this._IdReq;
            }
            set
            {
                if (this._IdReq != value)
                {
                    if (this._RequestPO.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdReqChanging(value);
                    this.SendPropertyChanging("IdReq");
                    this._IdReq = value;
                    this.SendPropertyChanged("IdReq");
                    this.OnIdReqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeedbackText in the schema.
        /// </summary>
        [Column(Name = @"feedback_text", Storage = "_FeedbackText", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FeedbackText
        {
            get
            {
                return this._FeedbackText;
            }
            set
            {
                if (this._FeedbackText != value)
                {
                    this.OnFeedbackTextChanging(value);
                    this.SendPropertyChanging("FeedbackText");
                    this._FeedbackText = value;
                    this.SendPropertyChanged("FeedbackText");
                    this.OnFeedbackTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestPO in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RequestPO_FeedbackPO", Storage="_RequestPO", ThisKey="IdReq", OtherKey="IdReq", IsForeignKey=true)]
        public RequestPO RequestPO
        {
            get
            {
                return this._RequestPO.Entity;
            }
            set
            {
                RequestPO previousValue = this._RequestPO.Entity;
                if ((previousValue != value) || (this._RequestPO.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RequestPO");
                    if (previousValue != null)
                    {
                        this._RequestPO.Entity = null;
                        previousValue.FeedbackPOs.Remove(this);
                    }
                    this._RequestPO.Entity = value;
                    if (value != null)
                    {
                        this._IdReq = value.IdReq;
                        value.FeedbackPOs.Add(this);
                    }
                    else
                    {
                        this._IdReq = default(int);
                    }
                    this.SendPropertyChanged("RequestPO");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DBContext.FeedbackProd in the schema.
    /// </summary>
    [Table(Name = @"dbo.FeedbackProd")]
    public partial class FeedbackProd : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdFeed;

        private int? _IdReq;

        private string _FeedbackText;
        #pragma warning restore 0649

        private EntityRef<RequestProd> _RequestProd;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFeedChanging(int value);
        partial void OnIdFeedChanged();
        partial void OnIdReqChanging(int? value);
        partial void OnIdReqChanged();
        partial void OnFeedbackTextChanging(string value);
        partial void OnFeedbackTextChanged();
        #endregion

        public FeedbackProd()
        {
            this._RequestProd  = default(EntityRef<RequestProd>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFeed in the schema.
        /// </summary>
        [Column(Name = @"id_feed", Storage = "_IdFeed", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdFeed
        {
            get
            {
                return this._IdFeed;
            }
            set
            {
                if (this._IdFeed != value)
                {
                    this.OnIdFeedChanging(value);
                    this.SendPropertyChanging("IdFeed");
                    this._IdFeed = value;
                    this.SendPropertyChanged("IdFeed");
                    this.OnIdFeedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdReq in the schema.
        /// </summary>
        [Column(Name = @"id_req", Storage = "_IdReq", DbType = "INT", UpdateCheck = UpdateCheck.Never)]
        public int? IdReq
        {
            get
            {
                return this._IdReq;
            }
            set
            {
                if (this._IdReq != value)
                {
                    if (this._RequestProd.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdReqChanging(value);
                    this.SendPropertyChanging("IdReq");
                    this._IdReq = value;
                    this.SendPropertyChanged("IdReq");
                    this.OnIdReqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeedbackText in the schema.
        /// </summary>
        [Column(Name = @"feedback_text", Storage = "_FeedbackText", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FeedbackText
        {
            get
            {
                return this._FeedbackText;
            }
            set
            {
                if (this._FeedbackText != value)
                {
                    this.OnFeedbackTextChanging(value);
                    this.SendPropertyChanging("FeedbackText");
                    this._FeedbackText = value;
                    this.SendPropertyChanged("FeedbackText");
                    this.OnFeedbackTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestProd in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RequestProd_FeedbackProd", Storage="_RequestProd", ThisKey="IdReq", OtherKey="IdReq", IsForeignKey=true)]
        public RequestProd RequestProd
        {
            get
            {
                return this._RequestProd.Entity;
            }
            set
            {
                RequestProd previousValue = this._RequestProd.Entity;
                if ((previousValue != value) || (this._RequestProd.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("RequestProd");
                    if (previousValue != null)
                    {
                        this._RequestProd.Entity = null;
                        previousValue.FeedbackProds.Remove(this);
                    }
                    this._RequestProd.Entity = value;
                    if (value != null)
                    {
                        this._IdReq = value.IdReq;
                        value.FeedbackProds.Add(this);
                    }
                    else
                    {
                        this._IdReq = default(int?);
                    }
                    this.SendPropertyChanged("RequestProd");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DBContext.RequestPO in the schema.
    /// </summary>
    [Table(Name = @"dbo.RequestPOS")]
    public partial class RequestPO : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdReq;

        private int _IdUser;

        private string _TextRequest;

        private string _Inn;

        private string _Address;

        private string _Status;

        private System.DateTime? _Date;

        private string _Unit;
        #pragma warning restore 0649

        private EntitySet<FeedbackPO> _FeedbackPOs;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdReqChanging(int value);
        partial void OnIdReqChanged();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnTextRequestChanging(string value);
        partial void OnTextRequestChanged();
        partial void OnInnChanging(string value);
        partial void OnInnChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDateChanging(System.DateTime? value);
        partial void OnDateChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        #endregion

        public RequestPO()
        {
            this._FeedbackPOs = new EntitySet<FeedbackPO>(new Action<FeedbackPO>(this.attach_FeedbackPOs), new Action<FeedbackPO>(this.detach_FeedbackPOs));
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdReq in the schema.
        /// </summary>
        [Column(Name = @"id_req", Storage = "_IdReq", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdReq
        {
            get
            {
                return this._IdReq;
            }
            set
            {
                if (this._IdReq != value)
                {
                    this.OnIdReqChanging(value);
                    this.SendPropertyChanging("IdReq");
                    this._IdReq = value;
                    this.SendPropertyChanged("IdReq");
                    this.OnIdReqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TextRequest in the schema.
        /// </summary>
        [Column(Name = @"text_request", Storage = "_TextRequest", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string TextRequest
        {
            get
            {
                return this._TextRequest;
            }
            set
            {
                if (this._TextRequest != value)
                {
                    this.OnTextRequestChanging(value);
                    this.SendPropertyChanging("TextRequest");
                    this._TextRequest = value;
                    this.SendPropertyChanged("TextRequest");
                    this.OnTextRequestChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Inn in the schema.
        /// </summary>
        [Column(Name = @"inn", Storage = "_Inn", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Inn
        {
            get
            {
                return this._Inn;
            }
            set
            {
                if (this._Inn != value)
                {
                    this.OnInnChanging(value);
                    this.SendPropertyChanging("Inn");
                    this._Inn = value;
                    this.SendPropertyChanged("Inn");
                    this.OnInnChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Name = @"date", Storage = "_Date", DbType = "SMALLDATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging("Date");
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", DbType = "NVARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeedbackPOs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RequestPO_FeedbackPO", Storage="_FeedbackPOs", ThisKey="IdReq", OtherKey="IdReq", DeleteRule="CASCADE")]
        public EntitySet<FeedbackPO> FeedbackPOs
        {
            get
            {
                return this._FeedbackPOs;
            }
            set
            {
                this._FeedbackPOs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_RequestPO", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.RequestPOs.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._IdUser = value.IdUser;
                        value.RequestPOs.Add(this);
                    }
                    else
                    {
                        this._IdUser = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FeedbackPOs(FeedbackPO entity)
        {
            this.SendPropertyChanging("FeedbackPOs");
            entity.RequestPO = this;
        }
    
        private void detach_FeedbackPOs(FeedbackPO entity)
        {
            this.SendPropertyChanging("FeedbackPOs");
            entity.RequestPO = null;
        }
    }

    /// <summary>
    /// There are no comments for DBContext.RequestProd in the schema.
    /// </summary>
    [Table(Name = @"dbo.RequestProd")]
    public partial class RequestProd : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdReq;

        private int _IdUser;

        private string _TextRequest;

        private string _Barcode;

        private string _Status;

        private System.DateTime? _Date;

        private string _Unit;
        #pragma warning restore 0649

        private EntitySet<FeedbackProd> _FeedbackProds;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdReqChanging(int value);
        partial void OnIdReqChanged();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnTextRequestChanging(string value);
        partial void OnTextRequestChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnDateChanging(System.DateTime? value);
        partial void OnDateChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        #endregion

        public RequestProd()
        {
            this._FeedbackProds = new EntitySet<FeedbackProd>(new Action<FeedbackProd>(this.attach_FeedbackProds), new Action<FeedbackProd>(this.detach_FeedbackProds));
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdReq in the schema.
        /// </summary>
        [Column(Name = @"id_req", Storage = "_IdReq", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdReq
        {
            get
            {
                return this._IdReq;
            }
            set
            {
                if (this._IdReq != value)
                {
                    this.OnIdReqChanging(value);
                    this.SendPropertyChanging("IdReq");
                    this._IdReq = value;
                    this.SendPropertyChanged("IdReq");
                    this.OnIdReqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TextRequest in the schema.
        /// </summary>
        [Column(Name = @"text_request", Storage = "_TextRequest", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string TextRequest
        {
            get
            {
                return this._TextRequest;
            }
            set
            {
                if (this._TextRequest != value)
                {
                    this.OnTextRequestChanging(value);
                    this.SendPropertyChanging("TextRequest");
                    this._TextRequest = value;
                    this.SendPropertyChanged("TextRequest");
                    this.OnTextRequestChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Name = @"barcode", Storage = "_Barcode", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this.OnBarcodeChanging(value);
                    this.SendPropertyChanging("Barcode");
                    this._Barcode = value;
                    this.SendPropertyChanged("Barcode");
                    this.OnBarcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "VARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Name = @"date", Storage = "_Date", DbType = "SMALLDATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging("Date");
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeedbackProds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RequestProd_FeedbackProd", Storage="_FeedbackProds", ThisKey="IdReq", OtherKey="IdReq", DeleteRule="CASCADE")]
        public EntitySet<FeedbackProd> FeedbackProds
        {
            get
            {
                return this._FeedbackProds;
            }
            set
            {
                this._FeedbackProds.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_RequestProd", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.RequestProds.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._IdUser = value.IdUser;
                        value.RequestProds.Add(this);
                    }
                    else
                    {
                        this._IdUser = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_FeedbackProds(FeedbackProd entity)
        {
            this.SendPropertyChanging("FeedbackProds");
            entity.RequestProd = this;
        }
    
        private void detach_FeedbackProds(FeedbackProd entity)
        {
            this.SendPropertyChanging("FeedbackProds");
            entity.RequestProd = null;
        }
    }

    /// <summary>
    /// There are no comments for DBContext.UserAdmin in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserAdmin")]
    public partial class UserAdmin : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdUser;

        private string _Login;

        private string _Password;

        private string _Token;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnTokenChanging(string value);
        partial void OnTokenChanged();
        #endregion

        public UserAdmin()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Name = @"login", Storage = "_Login", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Column(Name = @"token", Storage = "_Token", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if (this._Token != value)
                {
                    this.OnTokenChanging(value);
                    this.SendPropertyChanging("Token");
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DBContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdUser;

        private string _Email;

        private string _Phone;

        private string _UserHesh;

        private string _UserToken;

        private string _FIO;
        #pragma warning restore 0649

        private EntitySet<RequestPO> _RequestPOs;

        private EntitySet<RequestProd> _RequestProds;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnUserHeshChanging(string value);
        partial void OnUserHeshChanged();
        partial void OnUserTokenChanging(string value);
        partial void OnUserTokenChanged();
        partial void OnFIOChanging(string value);
        partial void OnFIOChanged();
        #endregion

        public User()
        {
            this._RequestPOs = new EntitySet<RequestPO>(new Action<RequestPO>(this.attach_RequestPOs), new Action<RequestPO>(this.detach_RequestPOs));
            this._RequestProds = new EntitySet<RequestProd>(new Action<RequestProd>(this.attach_RequestProds), new Action<RequestProd>(this.detach_RequestProds));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"phone", Storage = "_Phone", CanBeNull = false, DbType = "VARCHAR(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserHesh in the schema.
        /// </summary>
        [Column(Name = @"user_hesh", Storage = "_UserHesh", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserHesh
        {
            get
            {
                return this._UserHesh;
            }
            set
            {
                if (this._UserHesh != value)
                {
                    this.OnUserHeshChanging(value);
                    this.SendPropertyChanging("UserHesh");
                    this._UserHesh = value;
                    this.SendPropertyChanged("UserHesh");
                    this.OnUserHeshChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserToken in the schema.
        /// </summary>
        [Column(Name = @"user_token", Storage = "_UserToken", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserToken
        {
            get
            {
                return this._UserToken;
            }
            set
            {
                if (this._UserToken != value)
                {
                    this.OnUserTokenChanging(value);
                    this.SendPropertyChanging("UserToken");
                    this._UserToken = value;
                    this.SendPropertyChanged("UserToken");
                    this.OnUserTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FIO in the schema.
        /// </summary>
        [Column(Storage = "_FIO", DbType = "NVARCHAR(250)", UpdateCheck = UpdateCheck.Never)]
        public string FIO
        {
            get
            {
                return this._FIO;
            }
            set
            {
                if (this._FIO != value)
                {
                    this.OnFIOChanging(value);
                    this.SendPropertyChanging("FIO");
                    this._FIO = value;
                    this.SendPropertyChanged("FIO");
                    this.OnFIOChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestPOs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_RequestPO", Storage="_RequestPOs", ThisKey="IdUser", OtherKey="IdUser", DeleteRule="CASCADE")]
        public EntitySet<RequestPO> RequestPOs
        {
            get
            {
                return this._RequestPOs;
            }
            set
            {
                this._RequestPOs.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for RequestProds in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_RequestProd", Storage="_RequestProds", ThisKey="IdUser", OtherKey="IdUser", DeleteRule="CASCADE")]
        public EntitySet<RequestProd> RequestProds
        {
            get
            {
                return this._RequestProds;
            }
            set
            {
                this._RequestProds.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RequestPOs(RequestPO entity)
        {
            this.SendPropertyChanging("RequestPOs");
            entity.User = this;
        }
    
        private void detach_RequestPOs(RequestPO entity)
        {
            this.SendPropertyChanging("RequestPOs");
            entity.User = null;
        }

        private void attach_RequestProds(RequestProd entity)
        {
            this.SendPropertyChanging("RequestProds");
            entity.User = this;
        }
    
        private void detach_RequestProds(RequestProd entity)
        {
            this.SendPropertyChanging("RequestProds");
            entity.User = null;
        }
    }

}
