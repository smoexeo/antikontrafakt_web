//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 29.06.2020 16:54:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DBContext
{

    [DatabaseAttribute(Name = "DB_A612DF_Flatren")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class DBDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertFeedback(Feedback instance);
        partial void UpdateFeedback(Feedback instance);
        partial void DeleteFeedback(Feedback instance);
        partial void InsertRequest(Request instance);
        partial void UpdateRequest(Request instance);
        partial void DeleteRequest(Request instance);
        partial void InsertUserAdmin(UserAdmin instance);
        partial void UpdateUserAdmin(UserAdmin instance);
        partial void DeleteUserAdmin(UserAdmin instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public DBDataContext() :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DBDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Feedback> Feedbacks
        {
            get
            {
                return this.GetTable<Feedback>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }

        public Devart.Data.Linq.Table<Request> Requests
        {
            get
            {
                return this.GetTable<Request>();
            }
        }

        public Devart.Data.Linq.Table<UserAdmin> UserAdmins
        {
            get
            {
                return this.GetTable<UserAdmin>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace DBContext
{

    /// <summary>
    /// There are no comments for DBContext.Feedback in the schema.
    /// </summary>
    [Table(Name = @"dbo.Feedback")]
    public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdFeed;

        private int _IdReq;

        private string _FeedbackText;
        #pragma warning restore 0649

        private EntityRef<Request> _Request;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdFeedChanging(int value);
        partial void OnIdFeedChanged();
        partial void OnIdReqChanging(int value);
        partial void OnIdReqChanged();
        partial void OnFeedbackTextChanging(string value);
        partial void OnFeedbackTextChanged();
        #endregion

        public Feedback()
        {
            this._Request  = default(EntityRef<Request>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdFeed in the schema.
        /// </summary>
        [Column(Name = @"id_feed", Storage = "_IdFeed", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdFeed
        {
            get
            {
                return this._IdFeed;
            }
            set
            {
                if (this._IdFeed != value)
                {
                    this.OnIdFeedChanging(value);
                    this.SendPropertyChanging("IdFeed");
                    this._IdFeed = value;
                    this.SendPropertyChanged("IdFeed");
                    this.OnIdFeedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdReq in the schema.
        /// </summary>
        [Column(Name = @"id_req", Storage = "_IdReq", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdReq
        {
            get
            {
                return this._IdReq;
            }
            set
            {
                if (this._IdReq != value)
                {
                    if (this._Request.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdReqChanging(value);
                    this.SendPropertyChanging("IdReq");
                    this._IdReq = value;
                    this.SendPropertyChanged("IdReq");
                    this.OnIdReqChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FeedbackText in the schema.
        /// </summary>
        [Column(Name = @"feedback_text", Storage = "_FeedbackText", CanBeNull = false, DbType = "NVARCHAR(2000) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FeedbackText
        {
            get
            {
                return this._FeedbackText;
            }
            set
            {
                if (this._FeedbackText != value)
                {
                    this.OnFeedbackTextChanging(value);
                    this.SendPropertyChanging("FeedbackText");
                    this._FeedbackText = value;
                    this.SendPropertyChanged("FeedbackText");
                    this.OnFeedbackTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Request in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Request_Feedback", Storage="_Request", ThisKey="IdReq", OtherKey="Id", IsForeignKey=true)]
        public Request Request
        {
            get
            {
                return this._Request.Entity;
            }
            set
            {
                Request previousValue = this._Request.Entity;
                if ((previousValue != value) || (this._Request.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Request");
                    if (previousValue != null)
                    {
                        this._Request.Entity = null;
                        previousValue.Feedbacks.Remove(this);
                    }
                    this._Request.Entity = value;
                    if (value != null)
                    {
                        this._IdReq = value.Id;
                        value.Feedbacks.Add(this);
                    }
                    else
                    {
                        this._IdReq = default(int);
                    }
                    this.SendPropertyChanged("Request");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DBContext.Product in the schema.
    /// </summary>
    [Table(Name = @"dbo.Products")]
    public partial class Product
    {
        #pragma warning disable 0649

        private int _Id;

        private string _InventoryGroup;

        private string _ProductGroupName;

        private string _UnitValue;

        private string _Barcode;

        private string _Country;

        private string _Brand;

        private string _Article;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnInventoryGroupChanging(string value);
        partial void OnInventoryGroupChanged();
        partial void OnProductGroupNameChanging(string value);
        partial void OnProductGroupNameChanged();
        partial void OnUnitValueChanging(string value);
        partial void OnUnitValueChanged();
        partial void OnBarcodeChanging(string value);
        partial void OnBarcodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnBrandChanging(string value);
        partial void OnBrandChanged();
        partial void OnArticleChanging(string value);
        partial void OnArticleChanged();
        #endregion

        public Product()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this._Id = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for InventoryGroup in the schema.
        /// </summary>
        [Column(Name = @"Inventory_group", Storage = "_InventoryGroup", CanBeNull = false, DbType = "NVARCHAR(400) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string InventoryGroup
        {
            get
            {
                return this._InventoryGroup;
            }
            set
            {
                if (this._InventoryGroup != value)
                {
                    this._InventoryGroup = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductGroupName in the schema.
        /// </summary>
        [Column(Name = @"Product_group_name", Storage = "_ProductGroupName", CanBeNull = false, DbType = "NVARCHAR(400) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductGroupName
        {
            get
            {
                return this._ProductGroupName;
            }
            set
            {
                if (this._ProductGroupName != value)
                {
                    this._ProductGroupName = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitValue in the schema.
        /// </summary>
        [Column(Name = @"Unit_value", Storage = "_UnitValue", CanBeNull = false, DbType = "NVARCHAR(16) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UnitValue
        {
            get
            {
                return this._UnitValue;
            }
            set
            {
                if (this._UnitValue != value)
                {
                    this._UnitValue = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Barcode in the schema.
        /// </summary>
        [Column(Storage = "_Barcode", DbType = "NVARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string Barcode
        {
            get
            {
                return this._Barcode;
            }
            set
            {
                if (this._Barcode != value)
                {
                    this._Barcode = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"country", Storage = "_Country", DbType = "NVARCHAR(60)", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this._Country = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Brand in the schema.
        /// </summary>
        [Column(Name = @"brand", Storage = "_Brand", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string Brand
        {
            get
            {
                return this._Brand;
            }
            set
            {
                if (this._Brand != value)
                {
                    this._Brand = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Article in the schema.
        /// </summary>
        [Column(Name = @"article", Storage = "_Article", DbType = "NVARCHAR(40)", UpdateCheck = UpdateCheck.Never)]
        public string Article
        {
            get
            {
                return this._Article;
            }
            set
            {
                if (this._Article != value)
                {
                    this._Article = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for DBContext.Request in the schema.
    /// </summary>
    [Table(Name = @"dbo.Request")]
    public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _IdUser;

        private string _TextRequest;

        private string _Address;

        private string _Status;

        private string _Unit;

        private string _Type;

        private System.DateTime? _Date;
        #pragma warning restore 0649

        private EntitySet<Feedback> _Feedbacks;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnTextRequestChanging(string value);
        partial void OnTextRequestChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnUnitChanging(string value);
        partial void OnUnitChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnDateChanging(System.DateTime? value);
        partial void OnDateChanged();
        #endregion

        public Request()
        {
            this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TextRequest in the schema.
        /// </summary>
        [Column(Name = @"text_request", Storage = "_TextRequest", DbType = "NVARCHAR(2000)", UpdateCheck = UpdateCheck.Never)]
        public string TextRequest
        {
            get
            {
                return this._TextRequest;
            }
            set
            {
                if (this._TextRequest != value)
                {
                    this.OnTextRequestChanging(value);
                    this.SendPropertyChanging("TextRequest");
                    this._TextRequest = value;
                    this.SendPropertyChanged("TextRequest");
                    this.OnTextRequestChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "NVARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unit in the schema.
        /// </summary>
        [Column(Name = @"unit", Storage = "_Unit", DbType = "NVARCHAR(150)", UpdateCheck = UpdateCheck.Never)]
        public string Unit
        {
            get
            {
                return this._Unit;
            }
            set
            {
                if (this._Unit != value)
                {
                    this.OnUnitChanging(value);
                    this.SendPropertyChanging("Unit");
                    this._Unit = value;
                    this.SendPropertyChanged("Unit");
                    this.OnUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", DbType = "NVARCHAR(50)", UpdateCheck = UpdateCheck.Never)]
        public string Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        [Column(Name = @"date", Storage = "_Date", DbType = "SMALLDATETIME", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? Date
        {
            get
            {
                return this._Date;
            }
            set
            {
                if (this._Date != value)
                {
                    this.OnDateChanging(value);
                    this.SendPropertyChanging("Date");
                    this._Date = value;
                    this.SendPropertyChanged("Date");
                    this.OnDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Feedbacks in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Request_Feedback", Storage="_Feedbacks", ThisKey="Id", OtherKey="IdReq", DeleteRule="CASCADE")]
        public EntitySet<Feedback> Feedbacks
        {
            get
            {
                return this._Feedbacks;
            }
            set
            {
                this._Feedbacks.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Request", Storage="_User", ThisKey="IdUser", OtherKey="IdUser", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.Requests.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._IdUser = value.IdUser;
                        value.Requests.Add(this);
                    }
                    else
                    {
                        this._IdUser = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Feedbacks(Feedback entity)
        {
            this.SendPropertyChanging("Feedbacks");
            entity.Request = this;
        }
    
        private void detach_Feedbacks(Feedback entity)
        {
            this.SendPropertyChanging("Feedbacks");
            entity.Request = null;
        }
    }

    /// <summary>
    /// There are no comments for DBContext.UserAdmin in the schema.
    /// </summary>
    [Table(Name = @"dbo.UserAdmin")]
    public partial class UserAdmin : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdUser;

        private string _Login;

        private string _Password;

        private string _Token;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnTokenChanging(string value);
        partial void OnTokenChanged();
        #endregion

        public UserAdmin()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Name = @"login", Storage = "_Login", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"password", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Token in the schema.
        /// </summary>
        [Column(Name = @"token", Storage = "_Token", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if (this._Token != value)
                {
                    this.OnTokenChanging(value);
                    this.SendPropertyChanging("Token");
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DBContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IdUser;

        private string _Email;

        private string _Phone;

        private string _UserHesh;

        private string _UserToken;

        private string _FIO;
        #pragma warning restore 0649

        private EntitySet<Request> _Requests;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdUserChanging(int value);
        partial void OnIdUserChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnUserHeshChanging(string value);
        partial void OnUserHeshChanged();
        partial void OnUserTokenChanging(string value);
        partial void OnUserTokenChanged();
        partial void OnFIOChanging(string value);
        partial void OnFIOChanged();
        #endregion

        public User()
        {
            this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdUser in the schema.
        /// </summary>
        [Column(Name = @"id_user", Storage = "_IdUser", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int IdUser
        {
            get
            {
                return this._IdUser;
            }
            set
            {
                if (this._IdUser != value)
                {
                    this.OnIdUserChanging(value);
                    this.SendPropertyChanging("IdUser");
                    this._IdUser = value;
                    this.SendPropertyChanged("IdUser");
                    this.OnIdUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"phone", Storage = "_Phone", DbType = "VARCHAR(11)", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserHesh in the schema.
        /// </summary>
        [Column(Name = @"user_hesh", Storage = "_UserHesh", CanBeNull = false, DbType = "VARCHAR(MAX) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserHesh
        {
            get
            {
                return this._UserHesh;
            }
            set
            {
                if (this._UserHesh != value)
                {
                    this.OnUserHeshChanging(value);
                    this.SendPropertyChanging("UserHesh");
                    this._UserHesh = value;
                    this.SendPropertyChanged("UserHesh");
                    this.OnUserHeshChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserToken in the schema.
        /// </summary>
        [Column(Name = @"user_token", Storage = "_UserToken", DbType = "VARCHAR(200)", UpdateCheck = UpdateCheck.Never)]
        public string UserToken
        {
            get
            {
                return this._UserToken;
            }
            set
            {
                if (this._UserToken != value)
                {
                    this.OnUserTokenChanging(value);
                    this.SendPropertyChanging("UserToken");
                    this._UserToken = value;
                    this.SendPropertyChanged("UserToken");
                    this.OnUserTokenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FIO in the schema.
        /// </summary>
        [Column(Storage = "_FIO", DbType = "NVARCHAR(100)", UpdateCheck = UpdateCheck.Never)]
        public string FIO
        {
            get
            {
                return this._FIO;
            }
            set
            {
                if (this._FIO != value)
                {
                    this.OnFIOChanging(value);
                    this.SendPropertyChanging("FIO");
                    this._FIO = value;
                    this.SendPropertyChanged("FIO");
                    this.OnFIOChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Requests in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Request", Storage="_Requests", ThisKey="IdUser", OtherKey="IdUser", DeleteRule="CASCADE")]
        public EntitySet<Request> Requests
        {
            get
            {
                return this._Requests;
            }
            set
            {
                this._Requests.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Requests(Request entity)
        {
            this.SendPropertyChanging("Requests");
            entity.User = this;
        }
    
        private void detach_Requests(Request entity)
        {
            this.SendPropertyChanging("Requests");
            entity.User = null;
        }
    }

}
