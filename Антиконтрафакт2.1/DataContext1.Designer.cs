//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 10.06.2020 17:32:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DBA612DFFlatrenContext
{

    [DatabaseAttribute(Name = "DB_A612DF_Flatren")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class DBA612DFFlatrenDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DBA612DFFlatrenDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertRequest(Request instance);
        partial void UpdateRequest(Request instance);
        partial void DeleteRequest(Request instance);

        #endregion

        public DBA612DFFlatrenDataContext() :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DBA612DFFlatrenDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DBA612DFFlatrenDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBA612DFFlatrenDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBA612DFFlatrenDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBA612DFFlatrenDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBA612DFFlatrenDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Request> Requests
        {
            get
            {
                return this.GetTable<Request>();
            }
        }
    }
}

namespace DBA612DFFlatrenContext
{

    /// <summary>
    /// There are no comments for DBA612DFFlatrenContext.Request in the schema.
    /// </summary>
    [Table(Name = @"dbo.Request")]
    public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RequestId;

        private string _RequestCode;

        private string _Phonenumber;

        private string _Email;

        private string _RequesrText;

        private string _RequestSalepoint;

        private string _RequsetProduct;

        private string _RequestStatus;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRequestIdChanging(int value);
        partial void OnRequestIdChanged();
        partial void OnRequestCodeChanging(string value);
        partial void OnRequestCodeChanged();
        partial void OnPhonenumberChanging(string value);
        partial void OnPhonenumberChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnRequesrTextChanging(string value);
        partial void OnRequesrTextChanged();
        partial void OnRequestSalepointChanging(string value);
        partial void OnRequestSalepointChanged();
        partial void OnRequsetProductChanging(string value);
        partial void OnRequsetProductChanged();
        partial void OnRequestStatusChanging(string value);
        partial void OnRequestStatusChanged();
        #endregion

        public Request()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RequestId in the schema.
        /// </summary>
        [Column(Name = @"request_id", Storage = "_RequestId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RequestId
        {
            get
            {
                return this._RequestId;
            }
            set
            {
                if (this._RequestId != value)
                {
                    this.OnRequestIdChanging(value);
                    this.SendPropertyChanging("RequestId");
                    this._RequestId = value;
                    this.SendPropertyChanged("RequestId");
                    this.OnRequestIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestCode in the schema.
        /// </summary>
        [Column(Name = @"request_code", Storage = "_RequestCode", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string RequestCode
        {
            get
            {
                return this._RequestCode;
            }
            set
            {
                if (this._RequestCode != value)
                {
                    this.OnRequestCodeChanging(value);
                    this.SendPropertyChanging("RequestCode");
                    this._RequestCode = value;
                    this.SendPropertyChanged("RequestCode");
                    this.OnRequestCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phonenumber in the schema.
        /// </summary>
        [Column(Name = @"phonenumber", Storage = "_Phonenumber", DbType = "NVARCHAR(11)", UpdateCheck = UpdateCheck.Never)]
        public string Phonenumber
        {
            get
            {
                return this._Phonenumber;
            }
            set
            {
                if (this._Phonenumber != value)
                {
                    this.OnPhonenumberChanging(value);
                    this.SendPropertyChanging("Phonenumber");
                    this._Phonenumber = value;
                    this.SendPropertyChanged("Phonenumber");
                    this.OnPhonenumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequesrText in the schema.
        /// </summary>
        [Column(Name = @"requesr_text", Storage = "_RequesrText", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string RequesrText
        {
            get
            {
                return this._RequesrText;
            }
            set
            {
                if (this._RequesrText != value)
                {
                    this.OnRequesrTextChanging(value);
                    this.SendPropertyChanging("RequesrText");
                    this._RequesrText = value;
                    this.SendPropertyChanged("RequesrText");
                    this.OnRequesrTextChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestSalepoint in the schema.
        /// </summary>
        [Column(Name = @"request_salepoint", Storage = "_RequestSalepoint", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string RequestSalepoint
        {
            get
            {
                return this._RequestSalepoint;
            }
            set
            {
                if (this._RequestSalepoint != value)
                {
                    this.OnRequestSalepointChanging(value);
                    this.SendPropertyChanging("RequestSalepoint");
                    this._RequestSalepoint = value;
                    this.SendPropertyChanged("RequestSalepoint");
                    this.OnRequestSalepointChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequsetProduct in the schema.
        /// </summary>
        [Column(Name = @"requset_product", Storage = "_RequsetProduct", DbType = "NVARCHAR(MAX)", UpdateCheck = UpdateCheck.Never)]
        public string RequsetProduct
        {
            get
            {
                return this._RequsetProduct;
            }
            set
            {
                if (this._RequsetProduct != value)
                {
                    this.OnRequsetProductChanging(value);
                    this.SendPropertyChanging("RequsetProduct");
                    this._RequsetProduct = value;
                    this.SendPropertyChanged("RequsetProduct");
                    this.OnRequsetProductChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RequestStatus in the schema.
        /// </summary>
        [Column(Name = @"request_status", Storage = "_RequestStatus", DbType = "NCHAR(10)", UpdateCheck = UpdateCheck.Never)]
        public string RequestStatus
        {
            get
            {
                return this._RequestStatus;
            }
            set
            {
                if (this._RequestStatus != value)
                {
                    this.OnRequestStatusChanging(value);
                    this.SendPropertyChanging("RequestStatus");
                    this._RequestStatus = value;
                    this.SendPropertyChanged("RequestStatus");
                    this.OnRequestStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
